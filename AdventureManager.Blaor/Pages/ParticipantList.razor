@page "/participant/list"
@using AdventureManagement.BUS.ViewModel.Participant
@using AdventureManagement.BUS.Services.Interface
@using MudBlazor
@inject IParticipantService ParticipantService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Danh sách Participant</h3>

<MudPaper Class="py-6">
    <MudIconButton Icon="@Icons.Material.Filled.AddCircle" Title="Thêm Participant" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" @onclick="AddParticipant" />
    <MudTable Items="@participants" Hover="true" Dense="true" Bordered="true" Striped="true">
        <HeaderContent>
            <MudTh>Tên</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Số Lần Tham Gia</MudTh>
            <MudTh>Thao Tác</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Tên">@context.Name</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="Số Lần Tham Gia">@context.AdventureCount</MudTd>
            <MudTd DataLabel="Thao Tác">
                <MudIconButton Icon="@Icons.Material.Filled.Info" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" @onclick="() => ViewDetail(context.Id)" />
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Secondary" Size="Size.Small" @onclick="() => EditParticipant(context.Id)" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small" @onclick="() => DeleteParticipant(context.Id)" />
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    private List<ParticipantVM> participants = new List<ParticipantVM>();

    protected override async Task OnInitializedAsync()
    {
        participants = await ParticipantService.GetAll();
    }

    private void AddParticipant()
    {
        Navigation.NavigateTo("/participants/create");
    }

    private void ViewDetail(int id)
    {
        Navigation.NavigateTo($"/participants/detail/{id}");
    }

    private void EditParticipant(int id)
    {
        Navigation.NavigateTo($"/participants/update/{id}");
    }

    private async Task DeleteParticipant(int id)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Bạn có chắc muốn xóa Participant này?");
        if (confirmed)
        {
            await ParticipantService.Delete(id);
            participants = await ParticipantService.GetAll();
        }
    }
}
