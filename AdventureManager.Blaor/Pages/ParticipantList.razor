@page "/participant/list"
@using AdventureManagement.BUS.ViewModel.Participant
@using AdventureManagement.BUS.Services.Interface
@inject IParticipantService ParticipantService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<div class="container mt-4">
    <h3>Danh sách Participant</h3>

    <button class="btn btn-primary mb-3" @onclick="AddParticipant">Thêm Participant</button>

    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>Tên</th>
                <th>Email</th>
                <th>Số Lần Tham Gia</th>
                <th>Thao Tác</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var participant in participants)
            {
                <tr>
                    <td>@participant.Name</td>
                    <td>@participant.Email</td>
                    <td>@participant.AdventureCount</td>
                    <td>
                        <button class="btn btn-info btn-sm" @onclick="() => ViewDetail(participant.Id)">
                            <i class="bi bi-info-circle"></i> Chi tiết
                        </button>
                        <button class="btn btn-secondary btn-sm" @onclick="() => EditParticipant(participant.Id)">
                            <i class="bi bi-pencil"></i> Chỉnh sửa
                        </button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteParticipant(participant.Id)">
                            <i class="bi bi-trash"></i> Xóa
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<ParticipantVM> participants = new List<ParticipantVM>();

    protected override async Task OnInitializedAsync()
    {
        participants = await ParticipantService.GetAll();
    }

    private void AddParticipant()
    {
        Navigation.NavigateTo("/participants/create");
    }

    private void ViewDetail(int id)
    {
        Navigation.NavigateTo($"/participants/detail/{id}");
    }

    private void EditParticipant(int id)
    {
        Navigation.NavigateTo($"/participants/update/{id}");
    }

    private async Task DeleteParticipant(int id)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Bạn có chắc muốn xóa Participant này?");
        if (confirmed)
        {
            await ParticipantService.Delete(id);
            participants = await ParticipantService.GetAll();
        }
    }
}
