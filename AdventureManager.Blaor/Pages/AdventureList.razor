@page "/adventure/list"
@using AdventureManagement.BUS.ViewModel.AdventureViewModel
@using AdventureManagement.BUS.Services.Interface
@using MudBlazor

@inject IAdventureService AdventureService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Adventure List</h3>

<MudPaper Class="py-6">
    <MudIconButton Icon="@Icons.Material.Filled.AddCircle" Title="Add Adventure" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" @onclick="AddAdventure" />
    <MudTable Items="@adventures" Hover="true" Dense="true" Bordered="true" Striped="true">
        <HeaderContent>
            <MudTh>Title</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Location</MudTh>
            <MudTh>Duration (hours)</MudTh>
            <MudTh>Guide ID</MudTh>
            <MudTh>Organism IDs</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Location">@context.Location</MudTd>
            <MudTd DataLabel="Duration">@context.Duration</MudTd>
            <MudTd DataLabel="Guide ID">@context.Guide?.Id</MudTd>
            <MudTd DataLabel="Organism IDs">
                @if (context.Organisms != null && context.Organisms.Any())
                {
                    @foreach (var organism in context.Organisms)
                    {
                        <MudChip T="string" Color="Color.Primary" Size="Size.Small">@organism.Id</MudChip>
                    }
                }
                else
                {
                    <MudText>-</MudText>
                }
            </MudTd>
            <MudTd DataLabel="Actions">
                <MudIconButton Icon="@Icons.Material.Filled.Info" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" @onclick="() => ViewDetail(context.Id)" />
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Secondary" Size="Size.Small" @onclick="() => EditAdventure(context.Id)" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small" @onclick="() => DeleteAdventure(context.Id)" />
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    private List<AdventureVM> adventures = new List<AdventureVM>();

    protected override async Task OnInitializedAsync()
    {
        adventures = await AdventureService.GetAllAsync();
    }

    private void AddAdventure()
    {
        Navigation.NavigateTo("/adventures/create");
    }

    private void ViewDetail(int id)
    {
        Navigation.NavigateTo($"/adventures/detail/{id}");
    }

    private void EditAdventure(int id)
    {
        Navigation.NavigateTo($"/adventures/update/{id}");
    }

    private async Task DeleteAdventure(int id)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Bạn có chắc muốn xóa Adventure này?");
        if (confirmed)
        {
            await AdventureService.DeleteAsync(id);
            adventures = await AdventureService.GetAllAsync();
        }
    }
}
