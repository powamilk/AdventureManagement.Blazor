@page "/adventure/list"
@using AdventureManagement.BUS.ViewModel.AdventureViewModel
@using AdventureManagement.BUS.Services.Interface
@inject IAdventureService AdventureService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Adventure List</h3>

<button class="btn btn-primary" @onclick="AddAdventure">
    <i class="material-icons">add_circle</i> Add Adventure
</button>

<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>Title</th>
            <th>Description</th>
            <th>Location</th>
            <th>Duration (hours)</th>
            <th>Guide ID</th>
            <th>Organism IDs</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var adventure in adventures)
        {
            <tr>
                <td>@adventure.Title</td>
                <td>@adventure.Description</td>
                <td>@adventure.Location</td>
                <td>@adventure.Duration</td>
                <td>@adventure.Guide?.Id</td>
                <td>
                    @if (adventure.Organisms != null && adventure.Organisms.Any())
                    {
                        @foreach (var organism in adventure.Organisms)
                        {
                            <span class="badge badge-primary">@organism.Id</span>
                        }
                    }
                    else
                    {
                        <span>-</span>
                    }
                </td>
                <td>
                    <button class="btn btn-info btn-sm" @onclick="() => ViewDetail(adventure.Id)">
                        <i class="material-icons">info</i> View
                    </button>
                    <button class="btn btn-secondary btn-sm" @onclick="() => EditAdventure(adventure.Id)">
                        <i class="material-icons">edit</i> Edit
                    </button>
                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteAdventure(adventure.Id)">
                        <i class="material-icons">delete</i> Delete
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<AdventureVM> adventures = new List<AdventureVM>();

    protected override async Task OnInitializedAsync()
    {
        adventures = await AdventureService.GetAllAsync();
    }

    private void AddAdventure()
    {
        Navigation.NavigateTo("/adventures/create");
    }

    private void ViewDetail(int id)
    {
        Navigation.NavigateTo($"/adventures/detail/{id}");
    }

    private void EditAdventure(int id)
    {
        Navigation.NavigateTo($"/adventures/update/{id}");
    }

    private async Task DeleteAdventure(int id)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Bạn có chắc muốn xóa Adventure này?");
        if (confirmed)
        {
            await AdventureService.DeleteAsync(id);
            adventures = await AdventureService.GetAllAsync();
        }
    }
}
