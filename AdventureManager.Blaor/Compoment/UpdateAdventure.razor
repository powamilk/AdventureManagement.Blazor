@page "/adventures/update/{Id:int}"
@using AdventureManagement.BUS.ViewModel.AdventureViewModel
@using AdventureManagement.BUS.Services.Interface
@using MudBlazor
@inject IAdventureService AdventureService
@inject NavigationManager Navigation

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex justify-center">
    <MudPaper Class="p-4 m-4" Elevation="1" Style="width: 100%;">
        <MudText Typo="Typo.h6" GutterBottom="true">Cập Nhật Adventure</MudText>

        <MudForm Model="AdventureToUpdate" @ref="form" OnValidSubmit="HandleValidSubmit">
            <MudTextField Label="Tiêu đề" @bind-Value="AdventureToUpdate.Title" Required="true" Immediate="true" />
            <MudTextField Label="Mô tả" @bind-Value="AdventureToUpdate.Description" Required="true" Immediate="true" />
            <MudTextField Label="Địa điểm" @bind-Value="AdventureToUpdate.Location" Required="true" Immediate="true" />
            <MudNumericField Label="Thời lượng (giờ)" @bind-Value="AdventureToUpdate.Duration" Required="true" Immediate="true" />

            <MudNumericField Label="Guide ID" @bind-Value="AdventureToUpdate.GuideId" Required="true" Immediate="true" />

            <MudTextField Label="Danh sách Organism IDs (phân tách bằng dấu phẩy)" 
                          @bind-Value="OrganismIdsInput" 
                          Required="true" 
                          Immediate="true" />

            <MudButton Color="Color.Primary" Variant="Variant.Filled" Type="Submit">Lưu</MudButton>
            <MudButton Color="Color.Secondary" Variant="Variant.Outlined" OnClick="GoBack">Hủy</MudButton>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    [Parameter]
    public int Id { get; set; }

    private UpdateAdventureVM AdventureToUpdate { get; set; } = new UpdateAdventureVM();
    private MudForm form;
    private string OrganismIdsInput { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var adventure = await AdventureService.GetByIdAsync(Id);
        if (adventure != null)
        {
            AdventureToUpdate = new UpdateAdventureVM
            {
                Id = adventure.Id,
                Title = adventure.Title,
                Description = adventure.Description,
                Location = adventure.Location,
                Duration = adventure.Duration,
                GuideId = adventure.Guide.Id,
                OrganismIds = adventure.Organisms.Select(o => o.Id).ToList()
            };

            OrganismIdsInput = string.Join(",", AdventureToUpdate.OrganismIds);
        }
    }

    private async Task HandleValidSubmit()
    {
        if (!string.IsNullOrWhiteSpace(OrganismIdsInput))
        {
            AdventureToUpdate.OrganismIds = OrganismIdsInput.Split(',')
                .Select(id => int.TryParse(id, out var parsedId) ? parsedId : (int?)null)
                .Where(id => id.HasValue)
                .Select(id => id.Value)
                .ToList();
        }

        await AdventureService.UpdateAsync(Id, AdventureToUpdate);
        Navigation.NavigateTo("/adventure/list");
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/adventure/list");
    }
}
